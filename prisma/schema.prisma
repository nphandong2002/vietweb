// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}


enum UserRole {
  ADMIN
  USER
  QTV
}
enum RoomType {
  draw
}

model User {
  id            String    @id @default(cuid())
  name          String
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  phone         String?
  birthday      DateTime?
  avatar        String?
  preview       String?
  nick_name     String?

  role          UserRole @default(USER)
  accounts      Account[]

  room          Rooms[]
  roomMember    RoomMember[]
  roomFavorites RoomUserFavorites[]

  isTwoFactorEnabled Boolean @default(false)
  twoFactorConfirmation TwoFactorConfirmation?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

}

model VerificationToken {
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

}

model PasswordResetToken {
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

}

model TwoFactorToken {
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

}

model TwoFactorConfirmation {
  id String @id @default(cuid())

  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

}

model Rooms {
  id String @id @default(cuid())

  title     String
  image     String?
  type      RoomType

  roomMember RoomMember[]
  userFavorites RoomUserFavorites[]

  authorId String
  user User @relation(fields: [authorId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

}
model RoomMember {
  id String @id @default(cuid())

  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  roomId String
  room Rooms @relation(fields: [roomId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model RoomUserFavorites {
  id String @id @default(cuid())

  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  roomId String
  room Rooms @relation(fields: [roomId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}